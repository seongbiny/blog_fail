import type * as core from '@contentlayer/core';
import type { PosixFilePath } from '@contentlayer/utils';
import type { HasConsole } from '@contentlayer/utils/effect';
import { OT, T, These } from '@contentlayer/utils/effect';
import { FetchDataError } from '../errors/index.js';
import type { ContentTypeMap, FilePathPatternMap } from '../types.js';
import type { HasDocumentTypeMapState } from './DocumentTypeMap.js';
export declare const makeCacheItemFromFilePath: ({ relativeFilePath, filePathPatternMap, coreSchemaDef, contentDirPath, options, previousCache, contentTypeMap, }: {
    relativeFilePath: PosixFilePath;
    filePathPatternMap: FilePathPatternMap;
    coreSchemaDef: core.SchemaDef;
    contentDirPath: PosixFilePath;
    options: core.PluginOptions;
    previousCache: core.DataCache.Cache | undefined;
    contentTypeMap: ContentTypeMap;
}) => T.Effect<OT.HasTracer & HasConsole & HasDocumentTypeMapState, never, These.These<FetchDataError.FetchDataError, core.DataCache.CacheItem>>;
//# sourceMappingURL=makeCacheItemFromFilePath.d.ts.map