import type { UnexpectedMarkdownError, UnexpectedMDXError } from '@contentlayer/core';
import * as core from '@contentlayer/core';
import type { PosixFilePath } from '@contentlayer/utils';
import type { HasConsole, OT } from '@contentlayer/utils/effect';
import { T } from '@contentlayer/utils/effect';
import { FetchDataError } from '../errors/index.js';
import type { HasDocumentContext } from './DocumentContext.js';
import type { RawContent } from './types.js';
export declare const makeDocument: ({ rawContent, documentTypeDef, coreSchemaDef, relativeFilePath, contentDirPath, options, }: {
    rawContent: RawContent;
    documentTypeDef: core.DocumentTypeDef;
    coreSchemaDef: core.SchemaDef;
    relativeFilePath: PosixFilePath;
    contentDirPath: PosixFilePath;
    options: core.PluginOptions;
}) => T.Effect<OT.HasTracer & HasConsole & HasDocumentContext, FetchDataError.UnexpectedError | FetchDataError.IncompatibleFieldDataError | FetchDataError.NoSuchNestedDocumentTypeError, core.Document>;
declare type MakeDocumentInternalError = UnexpectedMarkdownError | UnexpectedMDXError | FetchDataError.NoSuchNestedDocumentTypeError | FetchDataError.IncompatibleFieldDataError;
export declare const getFlattenedPath: (relativeFilePath: string) => string;
export declare const testOnly_getDataForFieldDef: ({ fieldDef, rawFieldData, typeName, coreSchemaDef, options, relativeFilePath, contentDirPath, }: {
    fieldDef: core.FieldDef;
    rawFieldData: any;
    typeName: string;
    coreSchemaDef: core.SchemaDef;
    options: core.PluginOptions;
    relativeFilePath: PosixFilePath;
    contentDirPath: PosixFilePath;
}) => T.Effect<OT.HasTracer & HasConsole & HasDocumentContext, MakeDocumentInternalError, any>;
export {};
//# sourceMappingURL=mapping.d.ts.map